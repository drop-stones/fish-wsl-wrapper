function _wslwrap_help --description "Show usage information for wslwrap and related commands"
    # Top-level usage (no args)
    if test (count $argv) -eq 0
        _wslwrap_echo header -n "Usage: "
        _wslwrap_echo command "wslwrap <command> [<args>...]"
        echo ""
        echo "wslwrap provides lightweight wrapper functions for mixed Windows / WSL usage."
        echo ""
        _wslwrap_echo header "Available commands:"
        _wslwrap_echo command -n "  register    "
        echo "Register a wrapper (auto/windows) with cache strategy."
        _wslwrap_echo command -n "  unregister  "
        echo "Remove one or more registered wrappers."
        _wslwrap_echo command -n "  list        "
        echo "List registered wrapper names."
        _wslwrap_echo command -n "  link        "
        echo "Create symlinks for Windows executables in /usr/local/bin."
        _wslwrap_echo command -n "  unlink      "
        echo "Remove Windows executable symlinks from /usr/local/bin."
        _wslwrap_echo command -n "  links       "
        echo "List Windows executable symlinks in /usr/local/bin."
        _wslwrap_echo command -n "  help        "
        echo "Show general or command-specific help."
        echo ""
        _wslwrap_echo info -n "Run '"
        _wslwrap_echo command -n "wslwrap help <command>"
        echo "' for details."
        return 0
    end

    set -l subcommand $argv[1]
    switch $subcommand
        case register
            _wslwrap_echo header -n "Usage: "
            _wslwrap_echo command "wslwrap register [--mode <auto|windows>] [--cache <system|path>] <command> [<args>...]"
            echo ""
            echo "Register a wrapper for <command>."
            echo "When invoked, the wrapper prepends <args> you provided, then adds the runtime arguments you type."
            echo ""
            _wslwrap_echo header "Modes:"
            _wslwrap_echo command -n "  auto     "
            echo "Automatically chooses how to invoke the command."
            _wslwrap_echo command -n "  windows  "
            echo "Force Windows-side invocation."
            echo ""
            _wslwrap_echo header "Cache strategies:"
            _wslwrap_echo command -n "  system   "
            echo "Cache globally across all sessions (default)."
            _wslwrap_echo command -n "  path     "
            echo "Follow PATH changes, invalidate when PATH changes."
            echo ""
            _wslwrap_echo header "Examples:"
            _wslwrap_echo command "  wslwrap register fd --path-separator=/"
            echo "    Register fd (auto, system cache) with '--path-separator=/' option."
            _wslwrap_echo command "  wslwrap register --mode windows --cache system notepad"
            echo "    Register notepad forcing Windows mode with system cache."
            _wslwrap_echo command "  wslwrap register --cache path node"
            echo "    Register node with PATH-following cache for project-specific versions."
        case unregister
            _wslwrap_echo header -n "Usage: "
            _wslwrap_echo command "wslwrap unregister <command> [<command> ...]"
            echo ""
            echo "Remove one or more wrapper functions."
            echo ""
            _wslwrap_echo header "Example:"
            _wslwrap_echo command "  wslwrap unregister fd rg git"
            echo "    Unregister multiple wrappers"
            _wslwrap_echo command "  wslwrap list | wslwrap unregister"
            echo "    Unregister all wrappers"
        case list
            _wslwrap_echo header -n "Usage: "
            _wslwrap_echo command "wslwrap list"
            echo ""
            echo "List each registered wrapper name."
        case link
            _wslwrap_echo header -n "Usage: "
            _wslwrap_echo command "wslwrap link <command> [<target_path>]"
            echo ""
            echo "Create symlink in /usr/local/bin for Windows executable."
            echo "May require sudo privileges depending on system configuration."
            echo ""
            _wslwrap_echo header "Arguments:"
            _wslwrap_echo command -n "  <command>      "
            echo "Name of the symlink to create"
            _wslwrap_echo command -n "  <target_path>  "
            echo "Optional path to Windows executable (auto-detected if omitted)"
            echo ""
            _wslwrap_echo header "Examples:"
            _wslwrap_echo command "  wslwrap link node"
            echo "    Auto-detect and link node.exe"
            _wslwrap_echo command "  wslwrap link node /mnt/c/nodejs/node.exe"
            echo "    Link to specific Windows executable"
        case unlink
            _wslwrap_echo header -n "Usage: "
            _wslwrap_echo command "wslwrap unlink <command> [<command> ...]"
            _wslwrap_echo command "       <command_list> | wslwrap unlink"
            echo ""
            echo "Remove Windows executable symlinks from /usr/local/bin."
            echo "Supports multiple commands and pipe input."
            echo "May require sudo privileges depending on system configuration."
            echo ""
            _wslwrap_echo header "Examples:"
            _wslwrap_echo command "  wslwrap unlink node git"
            echo "    Remove multiple symlinks"
            _wslwrap_echo command "  wslwrap links | wslwrap unlink"
            echo "    Remove all Windows executable symlinks"
        case links
            _wslwrap_echo header -n "Usage: "
            _wslwrap_echo command "wslwrap links"
            echo ""
            echo "List Windows executable symlinks in /usr/local/bin."
            echo "Output is suitable for piping to other commands."
            echo ""
            _wslwrap_echo header "Examples:"
            _wslwrap_echo command "  wslwrap links"
            echo "    Show all Windows executable symlinks"
        case help
            _wslwrap_echo header -n "Usage: "
            _wslwrap_echo command "wslwrap help [<command>]"
            echo ""
            echo "Show general help or per-command help."
        case "*"
            _wslwrap_echo error "unknown subcommand '$subcommand'"
            _wslwrap_echo usage
            return 1
    end
end
